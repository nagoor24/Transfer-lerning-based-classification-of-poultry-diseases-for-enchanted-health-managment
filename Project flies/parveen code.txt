import os
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.optimizers import Adam

# Path to Alder pollen dataset (update this path after downloading dataset)
data_dir = '/path/to/alder_pollen_dataset'

# 1. Preprocess images
img_size = 128
batch_size = 32

datagen = ImageDataGenerator(rescale=1./255, validation_split=0.2)

train_data = datagen.flow_from_directory(
    data_dir,
    target_size=(img_size, img_size),
    batch_size=batch_size,
    class_mode='categorical',
    subset='training'
)

val_data = datagen.flow_from_directory(
    data_dir,
    target_size=(img_size, img_size),
    batch_size=batch_size,
    class_mode='categorical',
    subset='validation'
)

# 2. Define CNN Model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(img_size, img_size, 3)),
    MaxPooling2D(2, 2),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(train_data.num_classes, activation='softmax')
])

# 3. Compile Model
model.compile(optimizer=Adam(learning_rate=0.001),
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# 4. Train Model
history = model.fit(
    train_data,
    epochs=10,
    validation_data=val_data
)

# 5. Save the Model
model.save("alder_pollen_classifier.h5")

from flask import Flask, request, render_template
import tensorflow as tf
from tensorflow.keras.preprocessing import image
import numpy as np
import os

app = Flask(__name__)

# Load your trained model (make sure it's in the same directory or provide full path)
model = tf.keras.models.load_model('poultry_disease_classifier.h5')

# Map numeric class indices to disease names (update as per your dataset)
class_names = ['Disease1', 'Disease2', 'Disease3']  # change accordingly

def prepare_image(img_path):
    img = image.load_img(img_path, target_size=(224, 224))
    img_array = image.img_to_array(img) / 255.0  # normalize
    img_array = np.expand_dims(img_array, axis=0)  # batch dimension
    return img_array

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        # Check if a file was uploaded
        if 'file' not in request.files:
            return render_template('index.html', prediction='No file uploaded')
        file = request.files['file']
        if file.filename == '':
            return render_template('index.html', prediction='No selected file')
        if file:
            # Save uploaded file temporarily
            file_path = os.path.join('uploads', file.filename)
            os.makedirs('uploads', exist_ok=True)
            file.save(file_path)

            # Prepare image and predict
            img = prepare_image(file_path)
            preds = model.predict(img)
            pred_class = class_names[np.argmax(preds)]

            # Clean up uploaded file (optional)
            os.remove(file_path)

            return render_template('index.html', prediction=pred_class)

    return render_template('index.html', prediction='')

if __name__ == '__main__':
    app.run(debug=True)
